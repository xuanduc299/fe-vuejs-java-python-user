import { addComponent, addImportsSources, useNuxt, defineNuxtModule } from '@nuxt/kit';
import * as AllIcons from '@ant-design/icons-vue';

const allComponents = [
  "App",
  "Affix",
  "Alert",
  "Anchor",
  "AnchorLink",
  "AutoComplete",
  "AutoCompleteOptGroup",
  "AutoCompleteOption",
  "Avatar",
  "AvatarGroup",
  "BackTop",
  "Badge",
  "BadgeRibbon",
  "Breadcrumb",
  "BreadcrumbItem",
  "BreadcrumbSeparator",
  "Button",
  "ButtonGroup",
  "Calendar",
  "Card",
  "CardGrid",
  "CardMeta",
  "Carousel",
  "Cascader",
  "CheckableTag",
  "Checkbox",
  "CheckboxGroup",
  "Col",
  "Collapse",
  "CollapsePanel",
  "Comment",
  "ConfigProvider",
  ["Compact", "SpaceCompact"],
  "DatePicker",
  "Descriptions",
  "DescriptionsItem",
  "DirectoryTree",
  "Divider",
  "Drawer",
  "Dropdown",
  "DropdownButton",
  "Empty",
  "FloatButton",
  "FloatButtonGroup",
  "Form",
  "FormItem",
  "FormItemRest",
  "Grid",
  "Image",
  "ImagePreviewGroup",
  "Input",
  "InputGroup",
  "InputNumber",
  "InputPassword",
  "InputSearch",
  "Layout",
  "LayoutContent",
  "LayoutFooter",
  "LayoutHeader",
  "LayoutSider",
  "List",
  "ListItem",
  "ListItemMeta",
  "LocaleProvider",
  "Mentions",
  "MentionsOption",
  "Menu",
  "MenuDivider",
  "MenuItem",
  "MenuItemGroup",
  "Modal",
  "MonthPicker",
  "PageHeader",
  "Pagination",
  "Popconfirm",
  "Popover",
  "Progress",
  ["QRCode", "Qrcode"],
  "QuarterPicker",
  "Radio",
  "RadioButton",
  "RadioGroup",
  "RangePicker",
  "Rate",
  "Result",
  "Row",
  "Segmented",
  "Select",
  "SelectOptGroup",
  "SelectOption",
  "Skeleton",
  "SkeletonAvatar",
  "SkeletonButton",
  "SkeletonImage",
  "SkeletonInput",
  "SkeletonTitle",
  "Slider",
  "Space",
  "Spin",
  "Statistic",
  "StatisticCountdown",
  "Step",
  "Steps",
  "SubMenu",
  "Switch",
  "StyleProvider",
  "TabPane",
  "Table",
  "TableColumn",
  "TableColumnGroup",
  "TableSummary",
  "TableSummaryCell",
  "TableSummaryRow",
  "Tabs",
  "Tag",
  "Textarea",
  "TimePicker",
  "TimeRangePicker",
  "Timeline",
  "TimelineItem",
  "Tooltip",
  "Tour",
  "Transfer",
  "Tree",
  "TreeNode",
  "TreeSelect",
  "TreeSelectNode",
  "Typography",
  "TypographyLink",
  "TypographyParagraph",
  "TypographyText",
  "TypographyTitle",
  "Upload",
  "UploadDragger",
  "Watermark",
  "WeekPicker"
];
const allImports = ["message", "notification", "Modal", "App"];

const libraryName = "ant-design-vue";
const iconLibraryName = "@ant-design/icons-vue";
const prefix = "A";
const allIcons = Object.keys(AllIcons).filter((v) => /.*(Outlined|Filled|TwoTone)$/.test(v));
const defaults = {
  components: allComponents,
  icons: allIcons,
  imports: allImports
};

const resolveComponents = (config) => {
  const { components, icons } = config;
  const allComponents = components === false ? [] : components;
  allComponents.forEach((component) => {
    if (typeof component === "string") {
      addComponent({
        export: component,
        name: prefix + component,
        filePath: libraryName + "/es"
      });
    } else if (Array.isArray(component)) {
      addComponent({
        export: component[0],
        name: prefix + component[1],
        filePath: libraryName + "/es"
      });
    }
  });
  const allIcons = icons === false ? [] : icons;
  allIcons.forEach((icon) => {
    if (typeof icon === "string") {
      addComponent({
        export: icon,
        name: icon,
        filePath: iconLibraryName
      });
    } else if (Array.isArray(icon)) {
      addComponent({
        export: icon[0],
        name: icon[1],
        filePath: iconLibraryName
      });
    }
  });
};

const resolveImports = (config) => {
  const { imports } = config;
  const allImports = imports ? imports : [];
  addImportsSources({
    from: libraryName + "/es",
    imports: [...allImports]
  });
};

function resolveOptions() {
  const nuxt = useNuxt();
  nuxt.options.build.transpile.push(libraryName);
}

const module = defineNuxtModule({
  meta: {
    name: libraryName,
    configKey: "antd"
  },
  // Default configuration options of the Nuxt module
  defaults,
  setup(_options, nuxt) {
    const options = _options;
    resolveOptions();
    nuxt.options.imports.autoImport !== false && resolveImports(options);
    nuxt.options.components !== false && resolveComponents(options);
  }
});

export { module as default };
